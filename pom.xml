<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com</groupId>
    <artifactId>SpringBootCookbook</artifactId>
    <version>0.1</version>
    <packaging>jar</packaging>

    <name>Spring Boot Cookbook</name>
    <description>Demo project for Spring Boot</description>

    <!--
    Maven users can inherit from the spring-boot-starter-parent project to obtain sensible defaults. The parent project provides the following features:
       Java 1.6 as the default compiler level.
       UTF-8 source encoding.
       A Dependency Management section, allowing you to omit <version> tags for common dependencies, inherited from the spring-boot-dependencies POM.
       Sensible resource filtering.
       Sensible plugin configuration (exec plugin, surefire, Git commit ID, shade).
       Sensible resource filtering for application.properties and application.yml
       http://docs.spring.io/spring-boot/docs/1.4.0.RELEASE/reference/html/using-boot-build-systems.html#using-boot-maven-without-a-parent
       -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.0.RELEASE</version>
        <relativePath/>
        <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <druid.version>1.0.24</druid.version>
        <guava.version>19.0</guava.version>
        <quartz.version>2.2.3</quartz.version>
        <springfox.version>2.6.1</springfox.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--aspectjrt.jar是aspectjweaver.jar的子集.aop场景使用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-redis</artifactId>
        </dependency>
        <dependency>
            <!--org.springframework.jdbc.datasource.DataSourceTransactionManager-->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>
        <!--
                As you may already know, to use MyBatis with Spring you need at least an SqlSessionFactory and at least one mapper interface.
                MyBatis-Spring-Boot-Starter will:
                Autodetect an existing DataSource.
                Will create and register an instance of a SqlSessionFactoryBean passing that DataSource as an input.
                Will create and register an instance of a SqlSessionTemplate got out of the SqlSessionFactoryBean.
                Autoscan your mappers, link them to the SqlSessionTemplate and register them to Spring context so they can be injected into your beans.
                -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.1.1</version>
        </dependency>


        <!--
         没有这个dependency报java.lang.NoClassDefFoundError: com/google/common/collect/FluentIterable
         这个class在 version  19.0 中有。
         从哪个版本中开始有，没有进一步跟踪
         https://mvnrepository.com/artifact/com.google.guava/guava
         -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--
        SpringFox dependencies
        swagger简单来说就是统一定义了api的语义描述(json,yaml)，并提供ui显示，代码自动生成等等，即建立了rest api生态系统。
        如何生成这些api数据描述文件，大部分语言都有相关实现。
        java方面比较好的实现就是springfox
        springfox通过annotation来实现api描述，生成api   json描述文件。再交由swagger-ui实现展示。
        -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox.version}</version>
        </dependency>


        <!--java.lang.NoClassDefFoundError: org/apache/http/client/HttpClient-->
        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>

        <!--
           devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现），
           实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。
           即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的
           http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
           http://www.cnblogs.com/java-zhao/p/5502398.html
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!--<optional>true</optional>&lt;!&ndash; optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 &ndash;&gt;-->
        </dependency>


        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.CookBookApplication</mainClass>
                    <executable>true</executable><!--linux下生成的Jar可以像binary文件一样，设置成服务-->
                    <!--
                    You can also start your application via the supported build plugins (i.e. Maven and Gradle) as long as forking is enabled since DevTools need an isolated application classloader to operate properly.
                    You can force the plugin to fork the process as follows:
                    -->
                    <!--<fork>true</fork>&lt;!&ndash; 如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart &ndash;&gt;-->
                </configuration>
            </plugin>

            <!--            <plugin>
                            <groupId>org.flywaydb</groupId>
                            <artifactId>flyway-maven-plugin</artifactId>
                            <version>4.0.3</version>
                            <configuration>
                                <url>jdbc:mysql://192.168.33.88:3306/ggg</url>
                                <user>root</user>
                                <password>123456</password>
                            </configuration>
                            <dependencies>
                                <dependency>
                                    <groupId>mysql</groupId>
                                    <artifactId>mysql-connector-java</artifactId>
                                    <version>5.1.38</version>
                                </dependency>
                            </dependencies>
                        </plugin>-->


        </plugins>
    </build>

    <!-- <repositories>
         <repository>
             <id>spring-snapshots</id>
             <name>Spring Snapshots</name>
             <url>https://repo.spring.io/snapshot</url>
             <snapshots>
                 <enabled>true</enabled>
             </snapshots>
         </repository>
         <repository>
             <id>spring-milestones</id>
             <name>Spring Milestones</name>
             <url>https://repo.spring.io/milestone</url>
             <snapshots>
                 <enabled>false</enabled>
             </snapshots>
         </repository>
     </repositories>
     <pluginRepositories>
         <pluginRepository>
             <id>spring-snapshots</id>
             <name>Spring Snapshots</name>
             <url>https://repo.spring.io/snapshot</url>
             <snapshots>
                 <enabled>true</enabled>
             </snapshots>
         </pluginRepository>
         <pluginRepository>
             <id>spring-milestones</id>
             <name>Spring Milestones</name>
             <url>https://repo.spring.io/milestone</url>
             <snapshots>
                 <enabled>false</enabled>
             </snapshots>
         </pluginRepository>
     </pluginRepositories>-->


</project>
